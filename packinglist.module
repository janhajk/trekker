<?php

/**
 * @file
 * Allows users to create public shopping/packing lists.
 *
 *
 */


/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implements hook_menu().
 */
function packinglist_menu() {
  $items = array();

  $items['admin/packinglist'] = array(
    'title' => 'packing lists',
    'description' => 'Manage user packing lists.',
    'page callback' => 'packinglist_admin',
    'access arguments' => array('administer packing lists'),
    'file' => 'packinglist.admin.inc',
  );
  $items['admin/store/customers/packinglist/%packinglist/delete'] = array(
    'title' => 'Delete a packing list',
    'description' => 'Confirm the deletion of a packing list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packinglist_admin_delete_form', 4),
    'access arguments' => array('administer packing lists'),
    'file' => 'packinglist.admin.inc',
  );
  $items['admin/packinglist/settings'] = array(
    'title' => 'packing list settings',
    'description' => 'Configure the packing list settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packinglist_admin_settings_form'),
    'access arguments' => array('administer packing lists'),
    'file' => 'packinglist.admin.inc',
  );

  $items['packinglist'] = array(
    'title' => 'packing list',
    'description' => 'View or modify the contents of your packing list.',
    'page callback' => 'packinglist_display',
    'access arguments' => array('create packing lists'),
    'file' => 'packinglist.pages.inc',
  );
  $items['packinglist/search'] = array(
    'title' => 'Find a Packing list',
    'description' => 'Search for a packing list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packinglist_search_form'),
    'access arguments' => array('access packing lists'),
    'file' => 'packinglist.pages.inc',
  );
  $items['packinglist/search/%'] = array(
    'title' => 'Find a packing list',
    'description' => 'Search for a packing list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('packinglist_search_form', 2),
    'access arguments' => array('access packing lists'),
    'file' => 'packinglist.pages.inc',
  );

  // TODO: Convert this to use the autoloaded %packinglist.
  $items['packinglist/%'] = array(
    'title' => 'Packing list',
    'description' => 'View or modify the contents of your packing list.',
    'page callback' => 'packinglist_display',
    'page arguments' => array(1),
    'access arguments' => array('access packing lists'),
    'file' => 'packinglist.pages.inc',
  );

  $items['user/%user/packinglist'] = array(
    'title' => 'Packing list',
    'description' => 'View or modify the contents of your packing list.',
    'page callback' => 'packinglist_display',
    'page arguments' => array(1, 'user'),
    'access arguments' => array('create packing lists'),
    'file' => 'packinglist.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function packinglist_permission() {
  return array(
    'administer packing lists' => array(
      'title' => t('Administer packing lists'),
      'description' => t('Allows editing or deletion of any packing list.'),
    ),
    'create packing lists' => array(
      'title' => t('Create packing lists'),
      'description' => t('Allow creation and editing of own packing list.'),
    ),
    'access packing lists' => array(
      'title' => t('Access packing lists'),
      'description' => t('Allow viewing of any packing list.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function packinglist_cron() {
  // TODO: Add clean up of anonymous packing lists.
}

/**
 * Implements hook_theme().
 */
function packinglist_theme() {
  return array(
    'packinglist_block_title' => array(
      'variables' => array('packinglist_image' => NULL, 'packinglist_path' => FALSE, 'arrow_up_image' => FALSE),
    ),
    'packinglist_block_content' => array(
      'variables' => array(),
    ),
    'packinglist_view_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_search_access().
 */
function packinglist_search_access() {
  return user_access('access packing lists');
}

/**
 * Implements hook_search_info().
 */
function packinglist_search_info() {
  return array(
    'title' => t('Packing lists'),
    'path' => 'packinglist',
  );
}

/**
 * Implements hook_search_execute().
 *
 * Provides packinglist/search page to list and search for users with packing lists.
 */
function packinglist_search_execute($keys = NULL, $conditions = NULL) {
  global $user;

  $links = array();

  // Check for user, packing list title, or address matches.

  $query = db_select('packinglists', 'w');
  $query->join('users', 'u', 'w.uid = u.uid');
  $query->fields('w', array(
    'wid',
    'title',
  ));
  $query->condition(db_or()
    ->condition('u.name', '%' . $keys . '%', 'LIKE')
    ->condition('w.title', '%' . $keys . '%', 'LIKE')
    ->condition('w.address', '%' . $keys . '%', 'LIKE'));
  $result = $query->orderBy('w.title')->execute();

  foreach($result as $packinglist) {
    $results[] = array(
      'link' => url('packinglist/' . $packinglist->wid),
      'type' => t('packing list'),
      'title' => filter_xss($packinglist->title),
    );
  }

  return $results;
}

/**
 * Implements hook_block_info().
 */
function packinglist_block_info() {
  $blocks['search']['info'] = t('Find a packing list');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function packinglist_block_view($delta) {
  $block = array();

  if (user_access('access packing lists')) {
    if ($delta == 'search') {
      $block['subject'] = t('Find a packing list');
      $block['content'] = drupal_get_form('packinglist_block_search_form');
    }
  }

  return $block;
}

/**
 * Implements hook_exit().
 *
 * Code from CacheExclude - http://drupal.org/project/cacheexclude
 */
function packinglist_exit() {
  global $base_root;

  $pages = array('packinglist', 'packinglist/search');
  $this_page = request_uri();
  foreach ($pages as $page) {
    if ($page && strstr($this_page, $page) !== FALSE) {
      cache_clear_all($base_root . $this_page, 'cache_page');
      return;
    }
  }
}


/**
 * Implements hook_user_view().
 * 
 * Lists all packing list under user profile
 */
function packinglist_user_view($account, $view_mode) {
  $res = db_query("SELECT * FROM {packinglists} WHERE uid = :uid", array(':uid' => $account->uid));
  $items = array();
  foreach ($res as $obj) {
    $items['packinglist_' . $obj->wid] = array(
      'value' => l($obj->title, "packinglist/{$obj->wid}"),
    );
  }
  if (count($items) > 0) {
    return array(t('packing lists') => $items);
  }
}

/**
 * Implements hook_user_cancel().
 */
function packinglist_user_cancel($edit, $account, $method) {
  // Find and delete any packing lists associated with the user being deleted.
  $result = db_query("SELECT wid FROM {packinglists} WHERE uid = :uid", array(':uid' => $account->uid));

  foreach ($result as $row) {
    packinglist_delete($row->wid);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter uc_product_add_to_cart_form instances to include 'add to packing list'
 * button. Form submission is routed through packinglist_add_to_packinglist
 * to differentiate between 'add to cart' and 'add to packing list'. If this
 * module is added to Ubercart core, then this can be simplified.
 *
 * Alter uc_cart_checkout_form to include by default the delivery address
 * of a packing list's owner, if items come from a single packing list.
 */
function packinglist_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('create packing lists')) {
      
    // TODO: where to add?
    // 
    if (strpos($form_id, 'uc_product_add_to_cart_form_') === 0) {
      // Add the packing list button to the add to cart form.
      $form['actions']['packinglist'] = array(
        '#type' => 'submit',
        '#attributes' => array('class' => array('node-add-to-packinglist')),
        '#value' => t('Add to packing list'),
        '#submit' => array('packinglist_add_to_packinglist_submit'),
        '#weight' => 1,
      );
    }
  }
}

/**
 * packinglist_add_to_packinglist
 *
 * See comment for packinglist_form_alter: This function handles submission
 */
function packinglist_add_to_packinglist_submit($form, &$form_state) {
  // Add the item to the user's packing list.
  // 
  // TODO: module_invoke_all still needed?
  // 
  packinglist_add_item($form_state['values']['nid'], $form_state['values']['qty'], module_invoke_all('uc_add_to_cart_data', $form_state['values']));
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Get either an authenticated user's uid or an anonymous user's unique ID.
 */
function packinglist_get_uid() {
  global $user;

  // Get either an authenticated user's uid or an anonymous user's unique ID.
  if ($user->uid) {
    $uid = $user->uid;
  }
  else {
    if (!isset($_SESSION['packinglist_uid']) || empty($_SESSION['packinglist_uid'])) {
      $_SESSION['packinglist_uid'] = md5(uniqid(rand(), TRUE));
    }

    $uid = $_SESSION['packinglist_uid'];
  }

  return $uid;
}

/**
 * Return the packing list ID of the specified user (defaults to current user)
 */
function packinglist_get_wid($uid = NULL) {
  // Find the packing list matching the authenticated or anonymous user ID.
  // TODO: Handle multiple packinglists?
  if (empty($uid)) {
    $uid = packinglist_get_uid();
  }
  return db_query("SELECT wid FROM {packinglists} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
}

/**
 * Load a packing list object from the database.
 *
 * @param $wid
 *   The ID of the packing list to load; if NULL, looks for the current user's
 *     packing list.
 * @return
 *   A packing list object.
 */
function packinglist_load($wid) {
  if (empty($wid)) {
    $wid = packinglist_get_wid();
  }

  if (!$wid || !is_numeric($wid)) {
    return FALSE;
  }

  $result = db_query("SELECT * FROM {packinglists} WHERE wid = :wid", array(':wid' => $wid));

  if ($packinglist = $result->fetchObject()) {
    $packinglist->address = unserialize($packinglist->address);

    return $packinglist;
  }
}

/**
 * Get the items in a specified packing list.
 * 
 * 
 * TODO: Take out ubercart specific data (i.e. shippable, data, module)
 * 
 * 
 */
function packinglist_get_contents($wid = NULL) {
  $wid = $wid ? $wid : packinglist_get_wid();
  if (!$wid || !is_numeric($wid)) {
    return FALSE;
  }
  $items = array();
  $query = db_select('node', 'n');
  $query->join('packinglist_products', 'w', 'n.nid = w.nid');
  $query->fields('w');
  $query->addField('n', 'title');
  $query->addField('n', 'vid');
  $query->condition('w.wid', $wid);
  $query->addTag('node_access');
  $res = $query->execute();
  foreach ($res as $item) {
    for ($i = 0; $i < count($items); $i++) {
      if ($items[$i]->nid == $item->nid && $items[$i]->data == $item->data) {
        $items[$i]->qty += $item->qty;
        continue 2;
      }
    }
    $product = node_load($item->nid);
    $item->model = $product->model;
    $item->cost = $product->cost;
    $item->price = $product->sell_price;
    $item->weight = $product->weight;
    $item->weight_units = $product->weight_units;
    $item->shippable = $product->shippable;
    $item->data = unserialize($item->data);
    $item->module = $item->data['module'];
    $item->purchase = unserialize($item->purchase);
    $item->options = array();

    // add packinglist id data
    $item->data['wid'] = $item->wid;
    $item->data['wpid'] = $item->wpid;

    $items[] = $item;
  }

  return $items;
}

/**
 * Returns a packing list cart product given its wpid.
 * 
 * 
 * TODO: Do we need this?
 */
function packinglist_get_product($wpid) {
  if (!$wpid) {
    return FALSE;
  }
  $item = FALSE;
  $query = db_select('node', 'n');
  $query->join('packinglist_products', 'w', 'n.nid = w.nid');
  $query->fields('w');
  $query->addField('n', 'title');
  $query->addField('n', 'vid');
  $query->condition('w.wpid', $wpid);
  $query->addTag('node_access');
  $res = $query->execute();
  foreach ($res as $item) {
    $product = node_load($item->nid);
    $item->model = $product->model;
    $item->cost = $product->cost;
    $item->price = $product->sell_price;
    $item->weight = $product->weight;
    $item->weight_units = $product->weight_units;
    $item->shippable = $product->shippable;
    $item->data = unserialize($item->data);
    $item->module = $item->data['module'];
    $item->purchase = unserialize($item->purchase);
    $item->options = array();

    // add packinglist id data
    $item->data['wid'] = $item->wid;
    $item->data['wpid'] = $item->wpid;

    // Invoke hook_uc_update_cart_item() in enabled modules.
    // An especially important hook is uc_attribute_cart_item which
    // updates the item given the attributes.
    foreach (module_implements('uc_update_cart_item') as $module) {
      $func = $module . '_uc_update_cart_item';
      $func($item->nid, $item->data, $item->qty);
    }
  }
  return $item;
}

/**
 * packinglist_update_purchase is used from packinglist_order to
 * update the data on the purchases of a packing list item.
 */
function packinglist_update_purchase($witem) {
  if ($witem->wpid && is_array($witem->purchase)) {
    $rv = db_update('packinglist_products')
      ->fields(array(
        'purchase' => serialize($witem->purchase),
      ))
      ->condition('wpid', $witem->wpid)
      ->execute();
  }
}

/**
 * Creates a new packinglist for the current authenticated user.
 */
function packinglist_create_packinglist($title = NULL) {
  global $user;

  // Abort if user is not logged in.
  if (!$user->uid) {
    drupal_set_message(t('You must be logged in to create a packing list. Please <a href="!login_url">login</a> or <a href="!register_url">register</a>.', array('!login_url' => url('user', array('query' => drupal_get_destination())), '!register_url' => url('user/register', array('query' => drupal_get_destination())))), 'error');
    return FALSE;
  }

  // Get the current user ID for the packing list.
  $uid = packinglist_get_uid();

  if (empty($title)) {
    $title = variable_get('packinglist_default_title', "%user's packing list");
  }

  $result = $id = db_insert('packinglists')
    ->fields(array(
      'uid' => $uid,
      'title' => $title,
    ))
    ->execute();

  if ($result) {
    return $id;
  }

  return FALSE;
}

/**
 * Updates packing list settings.
 */
function packinglist_update_packinglist($wid, $title) {
  // TODO: Combine with packinglist_create_packinglist?

  db_update('packinglists')
    ->fields(array(
      'title' => $title,
    ))
    ->condition('wid', $wid)
    ->execute();
}

/**
 * Adds an item to a user's packing list.
 */
function packinglist_add_item($nid, $qty = 1, $data = NULL, $wid = NULL, $msg = TRUE, $check_redirect = TRUE) {
  $wid = $wid ? $wid : packinglist_get_wid();
  $created = FALSE;

  if (!$wid || $wid === NULL) {
    $wid = packinglist_create_packinglist();
    if (!$wid) {
      drupal_set_message(t('Could not create packing list. Adding gear failed.'), 'error');
      return FALSE;
    }
    $created = TRUE;
  }

  $node = node_load($nid);

  if (empty($data)) {
    $data = array('module' => 'uc_product');
  }
  elseif (!array_key_exists('module', $data)) {
    $data['module'] = 'uc_product';
  }

  if (!in_array($node->type, array_keys(uc_product_node_info()))) {
    drupal_set_message(t('!title is not a product. Unable to add to packing list.', array('!title' => filter_xss($node->title))), 'error');
    return;
  }

  $result = module_invoke_all('add_to_cart', $nid, $qty, $data);
  if (is_array($result) && !empty($result)) {
    foreach ($result as $row) {
      if ($row['success'] === FALSE) {
        if (isset($row['message']) && !empty($row['message'])) {
          $message = $row['message'];
        }
        else {
          $message = t('Sorry, that item is not available at this time.');
        }
        drupal_set_message(filter_xss($message), 'error');
        return;
      }
    }
  }

  $result = db_query("SELECT * FROM {packinglist_products} WHERE wid = :wid AND nid = :nid AND data = :data", array(':wid' => $wid, ':nid' => $nid, ':data' => serialize($data)));
  $item = $result->fetchObject();

  // If the item isn't in the cart yet, add it.
  if (is_null($item) || $item === FALSE) {
    $id = db_insert('packinglist_products')
      ->fields(array(
        'wid' => $wid,
        'nid' => $nid,
        'qty' => $qty,
        'changed' => REQUEST_TIME,
        'data' => serialize($data),
        'purchase' => '',
      ))
      ->execute();
    if ($msg) {
      drupal_set_message(t('<b>@product-title</b> added to <a href="!url">your packing list</a>.', array('@product-title' => filter_xss($node->title), '!url' => url('packinglist'))));
    }
  }
  else {
    // Update the item instead.
    $qty += $item->qty;
    $wpid = $item->wpid;

    // still needed? uc_product_update_packinglist_item($nid, $data, min($qty, 999999), $wid, $wpid);

    if ($msg) {
      drupal_set_message(filter_xss(t('Your <a href="!url">packing list</a> has been updated.', array('!url' => url('packinglist')))));
    }
  }

  if ($check_redirect) {
    if (isset($_GET['destination'])) {
      drupal_goto();
    }
  }
  if ($created) {
    drupal_goto('packinglist');
  }
}

/**
 * Remove an item from the packing list
 */
function packinglist_remove_item($wpid) {
  db_delete('packinglist_products')
    ->condition('wpid', $wpid)
    ->execute();
}



/**
 * Deletes a packing list and all its items.
 */
function packinglist_delete($wid) {
  db_delete('packinglists')
    ->condition('wid', $wid)
    ->execute();
  db_delete('packinglist_products')
    ->condition('wid', $wid)
    ->execute();
}

/**
 * Displays the packing list search block form.
 */
function packinglist_block_search_form($form) {
  $form = array();

  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Search keywords'),
    '#description' => t('Enter the keywords to use to search packing list titles.'),
    '#size' => 16,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * Submission handler for the packing list search block form.
 */
function packinglist_block_search_form_submit($form, &$form_state) {
  if (empty($form_state['values']['keywords'])) {
    $form_state['redirect'] = 'packinglist/search';
  }
  else {
    $form_state['redirect'] = 'packinglist/search/' . drupal_encode_path($form_state['values']['keywords']);
  }
}
